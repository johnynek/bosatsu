package Sub

export Sub, refl, substitute, compose

struct Sub[a: -*, b: +*](sub: forall f: +* -> *. f[a] -> f[b])

refl: forall a. Sub[a, a] = Sub(x -> x) 

def substitute[f: +* -> *, a, b](s: Sub[a, b], fa: f[a]) -> f[b]:
  Sub { sub } = s
  sub(fa)

def compose[a, b, c](first: Sub[a, b], second: Sub[b, c]) -> Sub[a, c]:
  second.substitute(first)

refl_bottom: forall b. Sub[forall a. a, b] = refl
refl_bottom1: Sub[forall a. a, forall a. a] = refl
refl_Inf: Sub[forall a. a, Int] = refl
refl_any: Sub[forall a. a, exists a. a] = refl
refl_any1: Sub[exists a. a, exists a. a] = refl
refl_int_any: Sub[Int, exists a. a] = refl