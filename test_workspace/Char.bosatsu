package Bosatsu/Char

def string_to_Char(s: String) -> Option[Char]:
  match s:
    case "$.{c}": Some(c)
    case _: None

str_to_char_tests = TestSuite("string_to_Char",
  [
    Assertion(string_to_Char("s") matches Some(.'s'), "s"),
    Assertion(string_to_Char("") matches None, "empty"),
    Assertion(string_to_Char("foo") matches None, "foo"),
    # test a 2 word character
    Assertion(string_to_Char("ğŸ‘‹") matches Some(.'ğŸ‘‹'), "foo"),
  ]
)

def length_String(s: String) -> Int:
  def loop(s, acc):
    recur s:
      case "": acc
      case "$.{_}${tail}": loop(tail, acc.add(1))

  loop(s, 0)

len_test = TestSuite("len tests",
  [
    Assertion(length_String("") matches 0, "empty"),
    Assertion(length_String("x") matches 1, "x"),
    Assertion(length_String("hello") matches 5, "hello"),
    Assertion(length_String("ğŸ‘‹") matches 1, "ğŸ‘‹"),
  ]
)

def last_String(s: String) -> Option[Char]:
  match s:
    case "": None
    case "${_}$.{l}": Some(l)

last_tests = TestSuite(
  "last_String",
  [
    Assertion(last_String("") matches None, "empty"),
    Assertion(last_String("x") matches Some(.'x'), "x"),
    Assertion(last_String("1234") matches Some(.'4'), "1234"),
    Assertion(last_String("ğŸ‘‹") matches Some(.'ğŸ‘‹'), "ğŸ‘‹"),
  ]
)

match_tests = TestSuite("match tests",
  [
    Assertion("ğŸ‘‹ğŸ‘‹ğŸ‘‹" matches "ğŸ‘‹$.{_}ğŸ‘‹", "test matching 1"),
    Assertion("abcğŸ‘‹ğŸ‘‹ğŸ‘‹" matches "${_}ğŸ‘‹$.{_}ğŸ‘‹", "test matching 2"),
    Assertion("abcğŸ‘‹ğŸ‘‹ğŸ‘‹" matches "abc$.{_}ğŸ‘‹${_}", "test matching 2.5"),
    Assertion("abcğŸ‘‹ğŸ‘‹ğŸ‘‹" matches "abcğŸ‘‹${_}", "test matching 3"),
    Assertion("abcğŸ‘‹ğŸ‘‹ğŸ‘‹" matches "${_}cğŸ‘‹${_}", "test matching 4"),
    Assertion("abcğŸ‘‹ğŸ‘‹ğŸ‘‹" matches "${_}cğŸ‘‹${_}$.{_}", "test matching 5"),
    Assertion("abcğŸ‘‹ğŸ‘‹ğŸ‘‹" matches "${_}ğŸ‘‹", "test matching 6"),
  ])

tests = TestSuite("Char tests",
  [
    str_to_char_tests,
    len_test,
    last_tests,
    match_tests,
  ]
)