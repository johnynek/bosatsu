package Bosatsu/Nat

from Bosatsu/Predef import add as operator +, times as operator *
export Nat(), times2, add, mult, to_Int, to_Nat

# This is the traditional encoding of natural numbers
# it is useful when you are iterating on all values
enum Nat: Zero, Succ(prev: Nat)

# This is an O(n) operation
def times2(n: Nat) -> Nat:
  recur n:
    Zero: Zero
    Succ(prev):
      # 2*(n + 1) = 2*n + 1 + 1
      Succ(Succ(times2(prev)))

def add(n1: Nat, n2: Nat) -> Nat:
  recur n1:
    Zero: n2
    Succ(prev_n1):
      match n2:
        Zero: n1
        Succ(prev_n2): Succ(Succ(add(prev_n1, prev_n2)))

# (n1 + 1) * (n2 + 1) = n1 * n2 + n1 + n2 + 1
def mult(n1: Nat, n2: Nat) -> Nat:
  recur n1:
    Zero: Zero
    Succ(n1):
      match n2:
        Zero: Zero
        Succ(n2):
          Succ(mult(n1, n2).add(add(n1, n2)))

def to_Int(n: Nat) -> Int:
    def loop(acc: Int, n: Nat):
      recur n:
        Zero: acc
        Succ(n): loop(acc + 1, n)
    loop(0, n)

def to_Nat(i: Int) -> Nat:
  int_loop(i, Zero, \i, nat -> (i.sub(1), Succ(nat)))

################
# Test code below
################

n1 = Succ(Zero)
n2 = Succ(n1)
n3 = Succ(n2)
n4 = Succ(n3)
n5 = Succ(n4)
n6 = Succ(n5)

def operator ==(i0: Int, i1: Int):
    cmp_Int(i0, i1) matches EQ

def addLaw(n1: Nat, n2: Nat, label: String) -> Test:
  Assertion(add(n1, n2).to_Int == (n1.to_Int + n2.to_Int), label)

def multLaw(n1: Nat, n2: Nat, label: String) -> Test:
  Assertion(mult(n1, n2).to_Int == (n1.to_Int * n2.to_Int), label)

def from_to_law(i: Int, message: String) -> Test:
    Assertion(i.to_Nat.to_Int == i, message)

from_to_suite = TestSuite("to_Nat/to_Int tests", [
        Assertion(-1.to_Nat.to_Int == 0, "-1 -> 0"),
        Assertion(-42.to_Nat.to_Int == 0, "-42 -> 0"),
        from_to_law(0, "0"),
        from_to_law(1, "1"),
        from_to_law(10, "10"),
        from_to_law(42, "42"),
    ])

tests = TestSuite("Nat tests",
  [
    addLaw(Zero, Zero, "0 + 0"),
    addLaw(Zero, n1, "0 + 1"),
    addLaw(n1, Zero, "1 + 0"),
    addLaw(n1, n2, "1 + 2"),
    addLaw(n2, n1, "2 + 1"),

    multLaw(Zero, Zero, "0 * 0"),
    multLaw(Zero, n1, "0 * 1"),
    multLaw(n1, Zero, "1 * 0"),
    multLaw(n1, n2, "1 * 2"),
    multLaw(n2, n1, "2 * 1"),
    from_to_suite,
  ])
