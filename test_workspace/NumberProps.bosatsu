package Bosatsu/NumberProps

from Bosatsu/BinNat import (BinNat, toBinNat as int_to_BinNat, is_even as is_even_BinNat,
    times2 as times2_BinNat, div2 as div2_BinNat, Zero as BNZero, Even as BNEven,
    times_BinNat, exp as exp_BinNat, cmp_BinNat, toInt as binNat_to_Int, add_BinNat,
    next as next_BinNat, sub_BinNat, eq_BinNat, sub_Option as sub_BinNat_Option,
    divmod as divmod_BinNat,
  )

from Bosatsu/Nat import (Nat, Zero as NZero, Succ as NSucc, to_Nat as int_to_Nat, is_even as is_even_Nat,
  times2 as times2_Nat, div2 as div2_Nat, cmp_Nat, to_Int as nat_to_Int, add as add_Nat,
  mult as mult_Nat, exp as exp_Nat, sub_Nat, divmod as divmod_Nat)

from Bosatsu/BinInt import (BinInt, int_to_BinInt, binInt_to_Int, add as add_BinInt,
  negate as negate_BinNat, abs as abs_BinInt, sub as sub_BinInt, binNat_to_BinInt,
  cmp as cmp_BinInt, not as not_BinInt, eq as eq_BinInt,
  )

from Bosatsu/Properties import (Prop, suite_Prop, forall_Prop, run_Prop)
from Bosatsu/Rand import (Rand, from_pair, geometric_Int, int_range, map_Rand, prod_Rand)

export (rand_Int, rand_Nat, rand_BinNat)

# Property checks for Nat, BinNat, Int

#external def todo(ignore: x) -> forall a. a

rand_Int: Rand[Int] = from_pair(int_range(128), geometric_Int)
rand_Nat: Rand[Nat] = rand_Int.map_Rand(int_to_Nat)
rand_BinNat: Rand[BinNat] = rand_Int.map_Rand(int_to_BinNat)
rand_BinInt: Rand[BinInt] = (
  pos = rand_Int.map_Rand(int_to_BinInt)
  neg = pos.map_Rand(not_BinInt)
  from_pair(pos, neg)
)

int_props = suite_Prop(
  "Int props",
  [
    forall_Prop(prod_Rand(rand_Int, rand_Int), "divmod law", ((a, b)) -> (
      adivb = a.div(b)
      amodb = a.mod_Int(b)
      a1 = adivb.times(b).add(amodb)
      Assertion(eq_Int(a1, a), "check")
    )),
  ]
)

def cmp_Comparison(c1: Comparison, c2: Comparison) -> Comparison:
    match c1:
        case LT:
            match c2:
                case LT: EQ
                case _: LT
        case EQ:
            match c2:
                case LT: GT
                case EQ: EQ
                case GT: LT
        case GT:
            match c2:
                case GT: EQ
                case _: GT

def exp_Int(base: Int, power: Int) -> Int:
  int_loop(power, 1, (p, acc) -> (p.sub(1), acc.times(base)))

small_rand_Nat: Rand[Nat] = int_range(7).map_Rand(int_to_Nat)
small_rand_BinNat: Rand[BinNat] = int_range(7).map_Rand(int_to_BinNat)

nat_props = suite_Prop(
  "Nat props",
  [
    forall_Prop(rand_Nat, "if is_even(n) then times2(div2(n)) == n", n -> (
      if is_even_Nat(n):
        n1 = times2_Nat(div2_Nat(n))
        Assertion(cmp_Nat(n1, n) matches EQ, "times2/div2")
      else:
        # we return the previous number
        n1 = times2_Nat(div2_Nat(n))
        Assertion(cmp_Nat(NSucc(n1), n) matches EQ, "times2/div2")
    )),
    forall_Prop(prod_Rand(rand_Nat, rand_Nat), "cmp_Nat matches cmp_Int", ((n1, n2)) -> (
      cmp_n = cmp_Nat(n1, n2)
      cmp_i = cmp_Int(n1.nat_to_Int(), n2.nat_to_Int())
      Assertion(cmp_Comparison(cmp_n, cmp_i) matches EQ, "cmp_Nat")
    )),
    forall_Prop(prod_Rand(rand_Nat, rand_Nat), "add homomorphism", ((n1, n2)) -> (
      n3 = add_Nat(n1, n2)
      i3 = add(n1.nat_to_Int(), n2.nat_to_Int())
      Assertion(eq_Int(n3.nat_to_Int(), i3), "add homomorphism")
    )),
    forall_Prop(prod_Rand(rand_Nat, rand_Nat), "sub_Nat homomorphism", ((n1, n2)) -> (
      n3 = sub_Nat(n1, n2)
      i1 = n1.nat_to_Int()
      i2 = n2.nat_to_Int()
      match cmp_Int(i1, i2):
        case EQ | GT:
          i3 = sub(i1, i2)
          Assertion(eq_Int(n3.nat_to_Int(), i3), "sub_Nat homomorphism")
        case LT:
          Assertion(n3 matches NZero, "sub to zero")
    )),
    forall_Prop(prod_Rand(rand_Nat, rand_Nat), "mult homomorphism", ((n1, n2)) -> (
      n3 = mult_Nat(n1, n2)
      i3 = times(n1.nat_to_Int(), n2.nat_to_Int())
      Assertion(eq_Int(n3.nat_to_Int(), i3), "mult homomorphism")
    )),
    forall_Prop(prod_Rand(small_rand_Nat, small_rand_Nat), "exp homomorphism", ((n1, n2)) -> (
      n3 = exp_Nat(n1, n2)
      i3 = exp_Int(n1.nat_to_Int(), n2.nat_to_Int())
      Assertion(eq_Int(n3.nat_to_Int(), i3), "exp homomorphism")
    )),
    forall_Prop(rand_Nat, "times2 == x -> mult(2, x)", n -> (
      t2 = n.times2_Nat()
      t2_2 = mult_Nat(n, NSucc(NSucc(NZero)))
      Assertion(cmp_Nat(t2, t2_2) matches EQ, "times2 == mult(2, _)")
    )),
    forall_Prop(prod_Rand(rand_Nat, rand_Nat), "divmod homomorphism", ((n1, n2)) -> (
      (dn, mn) = divmod_Nat(n1, n2)
      di = div(n1.nat_to_Int(), n2.nat_to_Int())
      mi = mod_Int(n1.nat_to_Int(), n2.nat_to_Int())
      Assertion(
        (eq_Int(dn.nat_to_Int(), di), eq_Int(mn.nat_to_Int(), mi)) matches (True, True),
        "div Nat")
    )),

  ]
)

binnat_props = suite_Prop(
  "BinNat props",
  [
    forall_Prop(rand_BinNat, "if is_even(n) then times2(div2(n)) == n", n -> (
      if is_even_BinNat(n):
        n1 = times2_BinNat(div2_BinNat(n))
        n_str = binNat_to_Int(n).int_to_String()
        n1_str = binNat_to_Int(n1).int_to_String()
        Assertion(cmp_BinNat(n1, n) matches EQ, "even, times2/div2: n = ${n_str}, n1 = ${n1_str}")
      else:
        # we return the previous number
        n1 = times2_BinNat(div2_BinNat(n))
        n_str = binNat_to_Int(n).int_to_String()
        n1_str = binNat_to_Int(n1).int_to_String()
        Assertion(cmp_BinNat(n1.next_BinNat(), n) matches EQ, "times2/div2: n = ${n_str}, n1 = ${n1_str}")
    )),
    forall_Prop(prod_Rand(rand_BinNat, rand_BinNat), "cmp_BinNat matches cmp_Int", ((n1, n2)) -> (
      cmp_n = cmp_BinNat(n1, n2)
      cmp_i = cmp_Int(n1.binNat_to_Int(), n2.binNat_to_Int())
      Assertion(cmp_Comparison(cmp_n, cmp_i) matches EQ, "cmp_BinNat")
    )),
    forall_Prop(prod_Rand(rand_BinNat, rand_BinNat), "cmp_BinNat matches eq_BinNat", ((n1, n2)) -> (
      eq1 = cmp_BinNat(n1, n2) matches EQ
      eq2 = eq_BinNat(n1, n2)
      correct = (eq1, eq2) matches (True, True) | (False, False)
      Assertion(correct, "cmp vs eq consistency")
    )),
    forall_Prop(prod_Rand(rand_BinNat, rand_BinNat), "add homomorphism", ((n1, n2)) -> (
      n3 = add_BinNat(n1, n2)
      i3 = add(n1.binNat_to_Int(), n2.binNat_to_Int())
      Assertion(eq_Int(n3.binNat_to_Int(), i3), "add homomorphism")
    )),
    forall_Prop(prod_Rand(rand_BinNat, rand_BinNat), "sub_BinNat homomorphism", ((n1, n2)) -> (
      n3 = sub_BinNat(n1, n2)
      i1 = n1.binNat_to_Int()
      i2 = n2.binNat_to_Int()
      match cmp_Int(i1, i2):
        case EQ | GT:
          i3 = sub(i1, i2)
          Assertion(eq_Int(n3.binNat_to_Int(), i3), "sub_BinNat homomorphism")
        case LT:
          Assertion(n3 matches BNZero, "sub to zero")
    )),
    forall_Prop(prod_Rand(rand_BinNat, rand_BinNat), "sub_BinNat_Option is None implies a < b", ((n1, n2)) -> (
      match sub_BinNat_Option(n1, n2):
        case Some(n3):
          n3_sub = sub_BinNat(n1, n2)
          Assertion(cmp_BinNat(n3, n3_sub) matches EQ, "sub_BinNat same as sub_BinNat_Option when Some")
        case None:
          Assertion(cmp_BinNat(n1, n2) matches LT, "otherwise n1 < n2")
    )),
    forall_Prop(prod_Rand(rand_BinNat, rand_BinNat), "mult homomorphism", ((n1, n2)) -> (
      n3 = times_BinNat(n1, n2)
      i3 = times(n1.binNat_to_Int(), n2.binNat_to_Int())
      Assertion(eq_Int(n3.binNat_to_Int(), i3), "mult homomorphism")
    )),
    forall_Prop(prod_Rand(small_rand_BinNat, small_rand_BinNat), "exp homomorphism", ((n1, n2)) -> (
      n3 = exp_BinNat(n1, n2)
      i3 = exp_Int(n1.binNat_to_Int(), n2.binNat_to_Int())
      Assertion(eq_Int(n3.binNat_to_Int(), i3), "exp homomorphism")
    )),
    forall_Prop(rand_BinNat, "times2 == x -> mult(2, x)", n -> (
      t2 = n.times2_BinNat()
      t2_2 = times_BinNat(n, BNEven(BNZero))
      Assertion(cmp_BinNat(t2, t2_2) matches EQ, "times2 == mult(2, _)")
    )),
    forall_Prop(prod_Rand(rand_BinNat, rand_BinNat), "divmod homomorphism", ((n1, n2)) -> (
      (dn, mn) = divmod_BinNat(n1, n2)
      di = div(n1.binNat_to_Int(), n2.binNat_to_Int())
      mi = mod_Int(n1.binNat_to_Int(), n2.binNat_to_Int())
      Assertion(
        (eq_Int(dn.binNat_to_Int(), di), eq_Int(mn.binNat_to_Int(), mi)) matches (True, True),
        "div BinNat")
    )),
  ]
)

binint_props = suite_Prop(
  "BinInt props",
  [
    forall_Prop(prod_Rand(rand_BinInt, rand_BinInt), "add homomorphism", ((n1, n2)) -> (
      n3 = add_BinInt(n1, n2)
      n3i = binInt_to_Int(n3)
      i3 = add(binInt_to_Int(n1), binInt_to_Int(n2))
      Assertion(eq_Int(n3i, i3), "add BinInt")
    )),
    forall_Prop(prod_Rand(rand_BinInt, rand_BinInt), "sub homomorphism", ((n1, n2)) -> (
      n3 = sub_BinInt(n1, n2)
      n3i = binInt_to_Int(n3)
      i3 = sub(binInt_to_Int(n1), binInt_to_Int(n2))
      Assertion(eq_Int(n3i, i3), "sub BinInt")
    )),
    forall_Prop(rand_BinInt, "x + (-x) == 0", x -> (
      nx = negate_BinNat(x)
      z = add_BinInt(x, nx).binInt_to_Int()
      Assertion(eq_Int(z, 0), "x + (-x) == 0")
    )),
    forall_Prop(rand_BinInt, "x + |x| == 0 or 2x", x -> (
      ax = abs_BinInt(x)
      sum = add_BinInt(x, binNat_to_BinInt(ax))
      xi = x.binInt_to_Int()
      if cmp_Int(xi, 0) matches GT:
        Assertion(eq_Int(sum.binInt_to_Int(), times(xi, 2)), "x + |x| == 2|x|")
      else:
        Assertion(eq_Int(sum.binInt_to_Int(), 0), "x + |x| == 0 if x <= 0")
    )),
    forall_Prop(rand_BinInt, "x + not(x) == x - x - 1 = -1", x -> (
      nx = not_BinInt(x)
      z = add_BinInt(x, nx)
      neg_1 = int_to_BinInt(-1)
      Assertion(
        (cmp_BinInt(z, neg_1), eq_BinInt(z, neg_1)) matches (EQ, True), "x + not(x) = -1")
    )),
  ])

all_props = [int_props, nat_props, binnat_props, binint_props]

seed = 123456
test = TestSuite("properties", [
  run_Prop(p, 100, seed) for p in all_props
])