package Euler/Two

# see:
# https://projecteuler.net/problem=2
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms

# we can't do infinite loops, so we need to find an upper bound on the size first
# each fib is > 16 / 10 times larger than the previous
# so to get items < 4000000, we need 1 * (16/10) * n = 4000000
# n = log(4000000)/(log 16 - log 10)
# using log base 10, we have:
# n = (log 4 + 6)/log 1.6
# or 7/log(1.6) would be a fine upper bound. We just need a lower bound on log(1.6) > 0.2
# so n = 35 is enough

def fib(n):
  range(n).foldLeft([], \revFib, item ->
    match revFib:
      []: [1]
      [h]: [2, h]
      [h1, h2, *_]: [h1.add(h2), *revFib])

def filter(as, fn):
  as.foldLeft([], \tail, item ->
    if fn(item): [item, *tail]
    else: tail)

def keep(i):
  match i.cmp_Int(4000000):
    GT: False
    _: i.mod_Int(2).eq_Int(0)

def sum(as):
  as.foldLeft(0)(add)

# lazy val fibStream: Stream[BigInt] = BigInt(1) #:: BigInt(1) #:: (fibStream.drop(1).zip(fibStream).map { case (a, b) => a + b })
# fibStream.filter(_ < BigInt(4000000)).filter(_ % 2 == 0).sum
# 4613732
computed = fib(35).filter(keep).sum

test = Assertion(computed.eq_Int(4613732), "expected 4613732")
