package PatternExamples

foo = "this is foo"
bar = "this is bar"

combine = "foo: ${foo} bar: ${bar}"

def operator ==(a, b):
    match string_Order_fn(a, b):
        EQ: True
        _: False

def operator &&(a, b):
    if a: b
    else: False

fb = match combine:
    "foo: ${f} bar: ${b}":
        (f == foo) && (b == bar)
    _: False

test0 = Assertion(fb, "foo-bar match")

def get_foos(s) -> List[String]:
    recur s:
        "${_}foo: (${foo})${rest}": [foo, *get_foos(rest)]
        _: []

test1 = match get_foos("foo: (1) foo: (2)"):
            ["1", "2"]: Assertion(True, "get_foos")
            [one]: Assertion(False, "get_foos: ${one}")
            _: Assertion(False, "get_foos")

test2_bool = match "unnamed match example":
            "unnamed ${_} example": True
            _: False

test2 = Assertion(test2_bool, "test unnamed match")

tests = TestSuite("PatternExamples", [
    test0,
    test1,
    test2,
])
