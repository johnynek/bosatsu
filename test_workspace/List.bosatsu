package Bosatsu/List

from Bosatsu/Bool import not
from Bosatsu/Nat import Nat, Zero, Succ
export any, eq_List, exists, head, for_all, size, sum, sort, uncons, zip

def any(as: List[Bool]) -> Bool:
    as matches [*_, True, *_]

def for_all(xs: List[a], fn: a -> Bool) -> Bool:
  recur xs:
    []: True
    [head, *tail]:
      if fn(head): for_all(tail, fn)
      else: False

def sum(as: List[Int]) -> Int:
  as.foldLeft(0, add)

def exists(xs: List[a], fn: a -> Bool) -> Bool:
    recur xs:
        []: False
        [head, *tail]:
            if fn(head): True
            else: exists(tail, fn)

def uncons(xs: List[a]) -> Option[(a, List[a])]:
    match xs:
        []: None
        [h, *t]: Some((h, t))

def head(xs: List[a]) -> Option[a]:
    match xs:
        []: None
        [h, *_]: Some(h)

def eq_List(fn: a -> a -> Bool, a: List[a], b: List[a]) -> Bool:
  recur a:
    []: b matches []
    [ah, *at]:
      match b:
        []: False
        [bh, *bt]:
          eq_List(fn, at, bt) if fn(ah, bh) else False

def zip(left: List[a], right: List[b]) -> List[(a, b)]:
    recur left:
        []: []
        [ah, *at]:
            match right:
                []: []
                [bh, *bt]: [(ah, bh), *zip(at, bt)]

# tail recursive size implementation
def size1(list, acc):
    recur list:
        []: acc
        [_, *t]: size1(t, Succ(acc))

def size(list: List[a]) -> Nat:
    size1(list, Zero)

def sort(ord: Order[a], list: List[a]) -> List[a]:
    Order { to_Fn } = ord

    def lt(x, h): to_Fn(x, h) matches LT
    def gteq(x, h): to_Fn(x, h) matches (GT | EQ)

    def loop(list: List[a], sz: Nat):
        recur sz:
            Zero: list
            Succ(n):
                match list:
                    []: []
                    [h, *t]:
                        lesser = [ ta for ta in t if lt(ta, h) ]
                        greater = [ ta for ta in t if gteq(ta, h) ]
                        # each of the above are at most size n
                        [ *loop(lesser, n), h, *loop(greater, n) ]
    loop(list, size(list))

##########################
# Test code below
##########################

operator =*= = eq_List(eq_Int)

def not(x): False if x else True

def headTest:
    res = head([1, 2, 3]) matches Some(1)
    Assertion(res, "head test")

def unconsTest:
    res = uncons([1, 2, 3]) matches Some((1, [2, 3]))
    Assertion(res, "uncons test")

def zipTest:
    test1 = zip([1, 2], ["1", "2"]) matches [(1, "1"), (2, "2")]

    test2 = zip([1], ["1", "2"]) matches [(1, "1")]

    test3 = zip([1, 2], ["1"]) matches [(1, "1")]

    TestSuite("zip tests", [
      Assertion(test1, "same size"),
      Assertion(test2, "left smaller"),
      Assertion(test3, "right smaller"),
    ])

def sortTest:
    sort_Int = sort(Order(cmp_Int))
    test1 = sort_Int([3, 1, 2]) matches [1, 2, 3]
    test2 = sort_Int([1, 2, 3]) matches [1, 2, 3]
    test3 = sort_Int([2, 3, 1]) matches [1, 2, 3]
    test4 = sort_Int([1, 2, 1]) matches [1, 1, 2]

    TestSuite("sort tests", [
      Assertion(test1, "3, 1, 2"),
      Assertion(test2, "1, 2, 3"),
      Assertion(test3, "2, 3, 1"),
      Assertion(test4, "1, 2, 1"),
    ])

tests = TestSuite("List tests", [
  Assertion([1, 2, 3] =*= [1, 2, 3], "list [1, 2, 3]"),
  Assertion(not([1, 2, 3] =*= [1, 2]), "list [1, 2, 3] != [1, 2]"),
  Assertion(range(6).sum.eq_Int(15), "range(6).sum == 1 + 2 + 3 + 4 + 5 = 15"),
  Assertion(range(6).exists(\v -> v.eq_Int(5)), "range(6) does have 5"),
  Assertion(not(range(6).exists(\v -> v.eq_Int(6))), "range(6) does not have 6"),
  headTest,
  unconsTest,
  zipTest,
  sortTest,
  Assertion(any([]) matches False, "any([])"),
  Assertion(any([True]) matches True, "any([True])"),
  Assertion(any([False]) matches False, "any([False])"),
  Assertion(any([False, False]) matches False, "any([False, False])"),
  Assertion(any([False, True]) matches True, "any([False, True])"),
  Assertion(any([True, False]) matches True, "any([True, False])"),
  Assertion(any([True, True]) matches True, "any([True, True])"),
  ])

