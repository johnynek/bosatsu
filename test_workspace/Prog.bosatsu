package Bosatsu/Prog

export (unit, pure, raise_error, read_env, recover, remap_env,
  println, get_args, await, recursive, declare_main, map, map_err,
  with_env, Prog)

external struct Prog[env: -*, err: +*, res: +*]

external def pure[env, res](a: res) -> Prog[env, forall e. e, res]
external def raise_error[env, err](e: err) -> Prog[env, err, forall a. a]
external read_env: forall a. Prog[a, forall e. e, a]
external def flat_map(prog: Prog[env, err, res], fn: res -> Prog[env, err, res1]) -> Prog[env, err, res1]

def map(prog: Prog[env, err, res], fn: res -> res1) -> Prog[env, err, res1]:
  prog.flat_map(res -> pure(fn(res)))

external def recover(prog: Prog[env, err, res], fn: err -> Prog[env, err1, res]) -> Prog[env, err1, res]

def map_err(prog: Prog[env, err, res], fn: err -> err1) -> Prog[env, err1, res]:
  prog.recover(res -> raise_error(fn(res)))

external def apply_fix(a: a,
  fn: (a -> Prog[env, err, b]) -> (a -> Prog[env, err, b])) -> Prog[env, err, b]

external def remap_env(p: Prog[env, err, res], f: env1 -> env) -> Prog[env1, err, res]

def with_env(p: Prog[e, err, res], env: e) -> Prog[env, err, res]:
  remap_env(p, _ -> env)

external def println(str: String) -> Prog[Unit, forall e. e, Unit]
external get_args: Prog[Unit, forall e. e, List[String]]

def await(p): fn -> p.flat_map(fn)

def recursive(fn: (a -> Prog[env, err, b]) -> (a -> Prog[env, err, b])) -> (a -> Prog[env, err, b]):
  a -> apply_fix(a, fn)

unit: Prog[(), forall e. e, ()] = pure(())

# this is just here so you can assert you have a valid "main" type
# for you final value
def declare_main(p: Prog[(), String, Int]) -> Prog[(), String, Int]:
  p

count_down = recursive(loop -> (
    def compute(i):
      if cmp_Int(i, 0) matches EQ | LT:
        println("done")
      else:
        _ <- println("${int_to_String(i)}").await()
        loop(i.sub(1))
    
    compute
  ))

to_run = declare_main(
  (
    _ <- count_down(10).await()
    args <- get_args.await()
    arg_str = args.foldLeft("", (s, item) -> match s:
      case "": item
      case _: "${s}, ${item}")
    _ <- println("args = ${arg_str}").await()
    pure(0)
  )
)