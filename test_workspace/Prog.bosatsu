package Bosatsu/Prog

export (unit, pure, raise_error, read_env, ignore_env, recover, remap_env,
  println, await, recursive, map, map_err,
  with_env, Prog, Main())

external struct Prog[env: -*, err: +*, res: +*]

external def pure[env, res](a: res) -> Prog[env, forall e. e, res]
external def raise_error[env, err](e: err) -> Prog[env, err, forall a. a]
external read_env: forall a. Prog[a, forall e. e, a]
external def flat_map(prog: Prog[env, err, res], fn: res -> Prog[env, err, res1]) -> Prog[env, err, res1]

def map(prog: Prog[env, err, res], fn: res -> res1) -> Prog[env, err, res1]:
  prog.flat_map(res -> pure(fn(res)))

external def recover(prog: Prog[env, err, res], fn: err -> Prog[env, err1, res]) -> Prog[env, err1, res]

def map_err(prog: Prog[env, err, res], fn: err -> err1) -> Prog[env, err1, res]:
  prog.recover(res -> raise_error(fn(res)))

external def apply_fix(a: a,
  fn: (a -> Prog[env, err, b]) -> (a -> Prog[env, err, b])) -> Prog[env, err, b]

external def remap_env(p: Prog[env, err, res], f: env1 -> env) -> Prog[env1, err, res]

def with_env(p: Prog[e, err, res], env: e) -> Prog[env, err, res]:
  remap_env(p, _ -> env)

def ignore_env[a, e, r](p: Prog[Unit, e, r]) -> Prog[a, e, r]:
  p.remap_env(_ -> ())

external def println(str: String) -> Prog[Unit, forall e. e, Unit]

def await(p): fn -> p.flat_map(fn)

def recursive(fn: (a -> Prog[env, err, b]) -> (a -> Prog[env, err, b])) -> (a -> Prog[env, err, b]):
  a -> apply_fix(a, fn)

unit: Prog[(), forall e. e, ()] = pure(())

struct Main(prog: Prog[List[String], forall e. e, Int])

count_down = recursive(loop -> (
    def compute(i):
      if cmp_Int(i, 0) matches EQ | LT:
        println("done")
      else:
        _ <- println("${int_to_String(i)}").await()
        loop(i.sub(1))
    
    compute
  ))

to_run = Main(
  read_env.flat_map(args ->
    (
      _ <- count_down(10).await()
      arg_str = args.foldl_List("", (s, item) -> match s:
        case "": item
        case _: "${s}, ${item}")
      _ <- println("args = ${arg_str}").await()
      pure(0)
    ).ignore_env()
  )
)