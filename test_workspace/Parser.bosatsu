package Parser

struct Parser[a](parse: String -> Option[(String, a)])

empty = Parser(\_ -> None)

def parse(p: Parser[a], str: String) -> Option[a]:
    Parser(fn) = p
    match fn(str):
        Some((_, a)): Some(a)
        None: None

def pure(item: a) -> Parser[a]: Parser(\s -> Some((s, item)))

def expect(str: String) -> Parser[Unit]:
    def p(s): match s.partition_String(str):
        Some(("", rest)): Some((rest, ()))
        Some(_) | None: None

    Parser(p)

def map(p, fn):
    Parser(pfn) = p
    Parser(\s -> match pfn(s):
        Some((rest, a)): Some((rest, fn(a)))
        None: None)

def flat_map(p: Parser[a], fn: a -> Parser[b]) -> Parser[b]:
    Parser(fa) = p
    def parse(s0):
        match fa(s0):
            Some((s1, a)):
                Parser(fb) = fn(a)
                fb(s1)
            None: None

    Parser(parse)

def one_of(ps: List[Parser[a]]) -> Parser[a]:
    recur ps:
        []: empty
        [p1]: p1
        [Parser(headFn), *prest]:
            Parser(tailFn) = one_of(prest)
            def parse(s):
                match headFn(s):
                    None: tailFn(s)
                    notEmpty: notEmpty

            Parser(parse)

def then_parse(pa: Parser[a], pb: Parser[b]) -> Parser[(a, b)]:
    Parser(fa) = pa
    Parser(fb) = pb
    def parse(s0):
        match fa(s0):
            Some((s1, a)):
                match fb(s1):
                    Some((s2, b)): Some((s2, (a, b)))
                    None: None
            None: None

    Parser(parse)

def expect_int(i: Int) -> Parser[Int]:
  expect(int_to_String(i)).map(\_ -> i)

digit = one_of([expect_int(i) for i in range(10)])

enum Nat: Z, S(n: Nat)

def to_Nat(i: Int) -> Nat:
  int_loop(i, Z, \i, nat -> (i.sub(1), S(nat)))

enum Rec[a, b]: Cont(next_input: a), Done(output: b)

def recur_max(n: Nat, fn: a -> Rec[a, b], in: a) -> Option[b]:
    recur n:
        Z: None
        S(prev):
            match fn(in):
              Cont(in1): recur_max(prev, fn, in1)
              Done(out): Some(out)

def digits_n(at_most: Int) -> Parser[Int]:
    Parser(fn) = digit

    def loop(in: (String, Int)) -> Rec[(String, Int), Option[(String, Int)]]:
        (s0, acc0) = in
        first = acc0 matches -1
        match fn(s0):
            Some((s1, d)):
                acc = 0 if first else acc0
                Cont((s1, acc.times(10).add(d)))
            None:
                if first: Done(None)
                else: Done(Some((s0, acc0)))

    # We add 1 because we want to go beyond the digit
    # and see that we have fully parsed
    parseFn = recur_max(S(to_Nat(at_most)), loop)
    Parser(\s ->
        match parseFn((s, -1)):
            Some(Some(a)): Some(a)
            Some(None) | None: None)

tests = TestSuite("Parser tests", [
    Assertion(pure(1).parse("foo") matches Some(1), "pure"),
    Assertion(expect("fo").parse("foo") matches Some(()), "expect(fo)"),
    Assertion(expect("fo").then_parse(expect("o")).parse("foo") matches Some(_), "expect(fo)"),
    Assertion(digit.parse("2") matches Some(2), "digit.parse(2)"),
    Assertion(digit.parse("9") matches Some(9), "digit.parse(2)"),
    Assertion(digits_n(10).parse("4242") matches Some(4242), "digits_n(10).parse(4242)"),
    Assertion(digits_n(10).parse("4242") matches Some(4242), "digits_n(10).parse(4242)"),
    Assertion(digits_n(3).parse("4242") matches None, "digits_n(3).parse(4242)"),
    Assertion(digits_n(4).parse("4242") matches Some(4242), "digits_n(4).parse(4242)"),
  ])
