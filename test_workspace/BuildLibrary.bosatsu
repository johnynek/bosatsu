package BuildLibrary

export File(), Library(), LibArgs(), build, Build, file, files, build_all, library, empty

struct Leibniz[a, b](cast: forall f. f[a] -> f[b])
(refl: forall a. Leibniz[a, a]) = Leibniz(\x -> x)

# In Bosatsu, like System F, the type exists a. P can be encoded as forall b. (forall a. P -> b) -> b
# We encode Mapped in this way, we want: Mapped(to_tuple: exists b. (Build[b], b -> a))
# we write: Mapped(to_tuple: forall c. (forall b. (Build[b], b -> a) -> c) -> c)

enum Build[a]:
  LoadFile(name: String, is_file: Leibniz[a, File])
  Pure(value: a)
  Mapped(consume: forall b. (forall c. (Build[c], c -> a) -> b) -> b)
  Map2(consume: forall b. (forall c, d. (Build[c], Build[d], c -> d -> a) -> b) -> b)
  BuildLib(files: Build[List[File]], deps: Build[List[Library]], is_lib: Leibniz[a, Library])

def map_Build(b: Build[a], fn: a -> b) -> Build[b]:
  Mapped(\cb -> cb((b, fn)))

def map2_Build(ba: Build[a], bb: Build[b], fn: a -> b -> c) -> Build[c]:
  Map2(\cb -> cb((ba, bb, fn)))

struct File(path: String)
struct Library

def file(s: String) -> Build[File]:
    LoadFile(s, refl)

(empty: forall a. Build[List[a]]) = Pure([])

def build_all(items: List[Build[a]]) -> Build[List[a]]:
    recur items:
      []: empty
      [h, *t]:
          (rest: Build[List[a]]) = build_all(t)
          map2_Build(h, rest, \h, t -> [h, *t])

def files(fs: List[String]) -> Build[List[File]]:
    build_all([file(f) for f in fs])

def library(
    sources: Build[List[File]],
    deps: Build[List[Library]]) -> Build[Library]:
    BuildLib(sources, deps, refl)

struct LibArgs(srcs: Build[List[File]], deps: Build[List[Library]])

def build(args: LibArgs) -> Build[Library]:
  LibArgs { srcs, deps } = args
  library(srcs, deps)

