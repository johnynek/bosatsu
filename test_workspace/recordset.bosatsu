package Example/Resultset2

def reorder(rows: List[t[a, b]], f: t[a, b] -> s[c, d]) -> List[s[c, d]]:
  rows.map_List(f)

x = [("a", True, "c")]
y = [(1, 2, 3)]

def swap_last_two((first, second, third)):
  (first, third, second)

x2 = x.reorder(swap_last_two)
y2 = y.reorder(swap_last_two)

def and(x, y):
  match x:
    True: y
    False: False

operator && = and

def equals(compare, x, y):
  match compare(x,y):
    EQ: True
    _: False

def cmp_Bool(x, y):
  match (x, y):
    (True, False): GT
    (False, True): LT
    _: EQ

def equal_List(is_equal, l1, l2):
  recur l1:
    []: match l2:
      []: True
      _: False
    [h1, *r1]: match l2:
      []: False
      [h2, *r2]: is_equal(h1, h2) && equal_List(is_equal, r1, r2)

def compare_triples((compare1, compare2), (x1, x2, x3), (y1, y2, y3)):
  compare1.equals(x1, y1) && compare1.equals(x2, y2) && compare2.equals(x3, y3)

tests = Test("reordering",
  [
    Assertion((string_Order_fn, cmp_Bool).compare_triples.equal_List(x2, [("a", "c", True)]), "letter swap"),
    Assertion((cmp_Int, cmp_Int).compare_triples.equal_List(y2, [(1, 3, 2)]), "number swap")
  ]
)
