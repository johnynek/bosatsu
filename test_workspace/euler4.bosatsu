package Euler/Four

from Bosatsu/List import eq_List
from Bosatsu/Nat import Nat, Succ, Zero, to_Nat

# see:
# https://projecteuler.net/problem=4
# A palindromic number reads the same both ways.
# The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def operator >(a, b):
  a.cmp_Int(b) matches GT

operator - = sub

def max_opt(o1, o2):
    match o1:
        None: o2
        s1 @ Some(v1):
            match o2:
                None: s1
                s2 @ Some(v2):
                    s2 if v2 > v1 else s1

# given a maximum value, and a function to Option[Int], return
# the maximum value of the function for inputs greater than 0
# if the starting number is <= 0, we return None
def max_of(n: Int, fn: Int -> Option[Int]) -> Option[Int]:
    def loop(nat: Nat, n: Int, max: Option[Int]):
        recur nat:
            Zero: max_opt(max, fn(n))
            Succ(prev_nat):
              next_max = max_opt(max, fn(n))
              prev_int = n.sub(1)
              loop(prev_nat, prev_int, next_max)
    loop(to_Nat(n), n, None)

# return the first defined value from largest to smallest
# of the given function, if it is defined
def first_of(n: Int, fn: Int -> Option[a]) -> Option[a]:
    def loop(nat, n):
        recur nat:
            Zero: fn(n)
            Succ(prev_nat):
                match fn(n):
                    None: loop(prev_nat, n.sub(1))
                    notNone: notNone
    loop(to_Nat(n), n)

# we use int_loop here since we are recuring on Int
def digit_list(n):
  rev_list = int_loop(n, [], \n, acc ->
    this_digit = n.mod_Int(10)
    next_acc = [this_digit, *acc]
    next_n = n.div(10)
    (next_n, next_acc))
  reverse(rev_list)

def is_palindrome(eq_fn, lst):
  eq_List(eq_fn)(lst, reverse(lst))

def num_is_palindrome(n):
  digits = digit_list(n)
  is_palindrome(eq_Int, digits)

def product_palindrome(n1, n2):
  prod = n1.times(n2)
  if num_is_palindrome(prod): Some(prod)
  else: None

max_pal_opt = max_of(99, \n1 -> first_of(99, product_palindrome(n1)))

max_pal = match max_pal_opt:
              Some(m): m
              None: 0

test = Assertion(max_pal.eq_Int(9009), "maximum palindrome")
