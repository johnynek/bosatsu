package TreeList

import Bosatsu/List [ eq_List ]
export [ TreeList, empty, cons, decons, head, get, fold, eq_TreeList ]

# implementation of O(1) cons/uncons O(log N) list-like data structure

enum Tree:
  Single(a: a)
  Branch(size: Int, head: a, left: Tree[a], right: Tree[a])

def foldTree(t: Tree[a], init: b, fn: b -> a -> b) -> b:
  # performance is better if we minimize the scope.
  # this is a good candidate for optimization to fix
  # this issue...
  def loop(t: Tree[a], init: b) -> b:
    recur t:
      Single(a): fn(init, a)
      Branch(_, h, l, r):
        init = fn(init, h)
        init = loop(l, init)
        loop(r, init)
  loop(t, init)

struct TreeList(trees: List[Tree[a]])

empty: forall a. TreeList[a] = TreeList([])

operator + = add

def cons(head: a, TreeList(tail): TreeList[a]) -> TreeList[a]:
  match tail:
    []: TreeList([Single(head)])
    [s1 @ Single(_)]:
      TreeList([Single(head), s1])
    [ Single(_), b1 @Branch(_, _, _, _), *t]:
      TreeList([Single(head), b1, *t])
    [s1 @ Single(_), s2 @ Single(_), *t]:
      TreeList([Branch(3, head, s1, s2), *t])
    [Branch(_, _, _, _), Single(_), *_]:
      # illegal state, we can just return empty
      empty
    [branch @ Branch(_, _, _, _)]: TreeList([Single(head), branch])
    [Branch(_, _, _, _), Single(_), *_]: empty
    [b1@Branch(s1, _, _, _), b2@Branch(s2, _, _, _), *t]:
      if (eq_Int(s1, s2)):
        TreeList([Branch(s1 + s2 + 1, head, b1, b2), *t])
      else:
        TreeList([Single(head), *tail])

def decons(TreeList(trees): TreeList[a]) -> Option[(a, TreeList[a])]:
  match trees:
    []: None
    [Single(h), *t]: Some((h, TreeList(t)))
    [Branch(_, h, b1, b2), *t]: Some((h, TreeList([b1, b2, *t])))

def head(tl: TreeList[a]) -> Option[a]:
  match decons(tl):
    Some((h, _)): Some(h)
    None: None

operator + = add
operator - = sub

def get(TreeList(trees): TreeList[a], idx: Int) -> Option[a]:
  # since int_loop stops at 0, we use 1 based indexing here
  (_, item) = int_loop(idx + 1, (trees, None), \idx, (trees, _) ->
    if eq_Int(idx, 1): (0, ([], head(TreeList(trees))))
    else:
      match trees:
        []: (0, ([], None))
        [Single(h), *rest]:
          if eq_Int(idx, 1): (0, ([], Some(h)))
          else: (idx - 1, (rest, None))
        [Branch(s, _, t1, t2), *rest]:
          # we can either skip just one, or skip the entire Tree
          match cmp_Int(idx, s):
            LT | EQ: (idx - 1, ([t1, t2, *rest], None))
            _: (idx - s, (rest, None))
  )
  item

def from_List(list: List[a]) -> TreeList[a]:
  list.reverse.foldLeft(empty, \lst, h -> cons(h, lst))

def fold(TreeList(trees): TreeList[a], init: b, fn: b -> a -> b) -> b:
  def loop(trees, init):
    recur trees:
      []: init
      [h, *t]:
        loop(t, h.foldTree(init, fn))
  loop(trees, init)

def to_List(list: TreeList[a]) -> List[a]:
  fold(list, [], \l, h -> [h, *l]).reverse

def eq_TreeList(fn, a, b):
  (res, _) = a.fold((True, b), \(current, b), h ->
    if current:
      match b.decons:
        None: (False, empty)
        Some((hb, tb)):
          if fn(h, hb): (True, tb)
          else: (False, empty)
    else: (False, empty)
  )
  res

def eq_Opt(fn, a, b):
  match (a, b):
    (Some(a), Some(b)): fn(a, b)
    (None, None): True
    _: False

eq_oi = eq_Opt(eq_Int)
eq_ti = eq_TreeList(eq_Int)
eq_li = eq_List(eq_Int)

operator +/ = cons

tl12 = 2 +/ (1 +/ empty)

list14 = from_List([1, 2, 3, 4])
cons14 = 1 +/ ( 2 +/ ( 3 +/ ( 4 +/ empty ) ) )

tests = TestSuite("TreeList tests", [
  Assertion(tl12.get(0).eq_oi(Some(2)), "get 0 == 2"),
  Assertion(tl12.get(1).eq_oi(Some(1)), "get 1 == 1"),
  Assertion(tl12.get(2).eq_oi(None), "get 2 == None"),
  Assertion(list14.get(0).eq_oi(Some(1)), "[1, 2, 3, 4] get 0"),
  Assertion(list14.get(1).eq_oi(Some(2)), "[1, 2, 3, 4] get 1"),
  Assertion(list14.get(2).eq_oi(Some(3)), "[1, 2, 3, 4] get 2"),
  Assertion(list14.get(3).eq_oi(Some(4)), "[1, 2, 3, 4] get 3"),
  Assertion(list14.fold(0, `+`).eq_Int(10), "fold to 10"),
  Assertion(eq_ti(list14, cons14), "fromList matches building by cons"),
])
