package BazelDepsApi

from DictTools import merge as merge_Dict

export (
  Artifact(), Config(), Resolver(), Replacement(), maven_central,
  default_options_with_scala, scala_dep, scala_dep_modules,
  merge_deps, merge_dep_List, standard_scala_replacements )

struct Resolver(id: String, type: String, url: String)

struct Options(buildHeader: List[String], languages: List[String],
  resolvers: List[Resolver],
  transitivity: String,
  resolverType: String,
  versionConflictPolicy: String)

maven_central = Resolver("mavencentral", "default", "https://repo.maven.apache.org/maven2/")

default_options_with_scala = Options(
  [ 'load("@io_bazel_rules_scala//scala:scala_import.bzl", "scala_import")' ],
  [ "java", "scala:2.11.11" ],
  [ maven_central ],
  "runtime_deps",
  "coursier",
  "highest")

struct Artifact(modules: List[String], lang: String, version: String, exports: List[String])

struct Replacement(lang: String, target: String)

struct Config(
  options: Options,
  dependencies: Dict[String, Dict[String, Artifact]],
  replacements: Dict[String, Dict[String, Replacement]])

def scala_dep(orgname: String, artifact: String, version: String) -> Dict[String, Dict[String, Artifact]]:
  { orgname: { artifact: Artifact([], "scala", version, []) } }

def scala_dep_modules(orgname: String, artifact: String, modules, version: String, exports) -> Dict[String, Dict[String, Artifact]]:
  { orgname: { artifact: Artifact(modules, "scala", version, exports) } }

def merge_artifact(left: Artifact, right: Artifact):
  Artifact(lm, _, _, le) = left
  Artifact(rm, rr, rv, re) = right
  Artifact(lm.concat(rm), rr, rv, le.concat(re))

def merge_deps(left: Dict[String, Dict[String, Artifact]], right: Dict[String, Dict[String, Artifact]]):
  merge_inner = \l, r -> merge_Dict(l, r, merge_artifact)
  merge_Dict(left, right, merge_inner)

def merge_dep_List(deps): deps.foldLeft({}, merge_deps)

standard_scala_replacements = {
  'org.scala-lang': {
    'scala-compiler': Replacement(
        'scala/unmangled',
        '@io_bazel_rules_scala_scala_compiler//:io_bazel_rules_scala_scala_compiler'),
    'scala-library': Replacement(
        'scala/unmangled',
        '@io_bazel_rules_scala_scala_library//:io_bazel_rules_scala_scala_library'),
    'scala-reflect': Replacement(
        'scala/unmangled',
        '@io_bazel_rules_scala_scala_reflect//:io_bazel_rules_scala_scala_reflect'),
    },
  'org.scala-lang.modules': {
    'scala-parser-combinators': Replacement(
        'scala', 
        '@io_bazel_rules_scala_scala_parser_combinators//:io_bazel_rules_scala_scala_parser_combinators'),
    'scala-xml': Replacement(
        'scala',
        '@io_bazel_rules_scala_scala_xml//:io_bazel_rules_scala_scala_xml')
  }
}

