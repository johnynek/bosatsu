package IntTest

def operator +(a, b): a.add(b)
def operator -(a, b): a.sub(b)
def operator *(a, b): a.times(b)
def operator ==(a, b): a.eq_Int(b)

tests = TestSuite("Int tests", [
    Assertion(42 + 58 == 100, "42 + 58 == 100"),
    Assertion(-42 * 2 == -84, "-42 * 2 == -84"),
    Assertion(0 - 1 == -1, "0 - 1 == -1"),
    # 32-bit max + 1
    Assertion(2_147_483_647 + 1 == 2_147_483_648, "2_147_483_647 + 1 == 2_147_483_648 but got ${int_to_String(2_147_483_647 + 1)}"),
    # 32-bit max - 1
    Assertion(2_147_483_647 - 1 == 2_147_483_646, "2_147_483_647 - 1 == 2_147_483_646"),
    # 32-bit min - 1
    Assertion(-2_147_483_648 - 1 == -2_147_483_649, "-2_147_483_648 - 1 == -2_147_483_649 but got ${int_to_String(-2_147_483_648 - 1)}"),
    Assertion(-2_147_483_647 - 1 == -2_147_483_648, "-2_147_483_647 - 1 == -2_147_483_648 but got ${int_to_String(-2_147_483_647 - 1)}"),
    Assertion(-2_147_483_647 - 2 == -2_147_483_649, "-2_147_483_647 - 2 == -2_147_483_649 but got ${int_to_String(-2_147_483_647 - 2)}"),
    Assertion(0 - (-2_147_483_648) == 2_147_483_648, "-(-2_147_483_648) works: ${int_to_String(0 - (-2_147_483_648))}"),
    Assertion(0 - (-2_147_483_647) == 2_147_483_647, "-(-2_147_483_647) works: ${int_to_String(0 - (-2_147_483_647))}"),
    # 32-bit overflow test
    Assertion(2_147_483_647 * 2 == 4_294_967_294, "2_147_483_647 * 2 == 4_294_967_294 but got: ${int_to_String(2_147_483_647 * 2)}"),
    # 32-bit -> overflow, then back down
    Assertion(((2_147_483_647 * 10) - (2_147_483_647 * 9)) == 2_147_483_647, "(x := 2_147_483_647) * 10 -  x * 9 == x result = ${int_to_String(((2_147_483_647 * 10) - (2_147_483_647 * 9)))}"),
    # 64-bit max + 1
    Assertion(9_223_372_036_854_775_807 + 1 == 9_223_372_036_854_775_808, "9_223_372_036_854_775_807 + 1 == 9_223_372_036_854_775_808"),
    # 64-bit min - 1
    Assertion(-9_223_372_036_854_775_808 - 1 == -9_223_372_036_854_775_809, "-9_223_372_036_854_775_808 - 1 == -9_223_372_036_854_775_809"),
    # 64-bit overflow test
    Assertion(9_223_372_036_854_775_807 * 2 == 18_446_744_073_709_551_614, "9_223_372_036_854_775_807 * 2 == 18_446_744_073_709_551_614"),
    # 64-bit negative overflow test
    Assertion(-9_223_372_036_854_775_808 * 2 == -18_446_744_073_709_551_616, "-9_223_372_036_854_775_808 * 2 == -18_446_744_073_709_551_616"),
    # Post-overflow arithmetic
    Assertion((9_223_372_036_854_775_807 + 1) * 2 == 18_446_744_073_709_551_616, "(9_223_372_036_854_775_807 + 1) * 2 == 18_446_744_073_709_551_616"),
    # Mixed multiplication and subtraction
    Assertion((9_223_372_036_854_775_807 * 9) - (9_223_372_036_854_775_807 * 8) == 9_223_372_036_854_775_807, "(9_223_372_036_854_775_807 * 9) - (9_223_372_036_854_775_807 * 8) == 9_223_372_036_854_775_807"),
])