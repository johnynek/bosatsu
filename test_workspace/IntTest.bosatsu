package IntTest

def operator +(a, b): a.add(b)
def operator -(a, b): a.sub(b)
def operator *(a, b): a.times(b)
def operator ==(a, b): a.eq_Int(b)
def operator &(a, b): a.and_Int(b)
def operator |(a, b): a.or_Int(b)
def operator ^(a, b): a.xor_Int(b)

def assert_eq(got, expect, message):
  Assertion(got == expect, "${message}: got = ${int_to_String(got)}, expected = ${int_to_String(expect)}")

# Test cases for bitwise AND operation
diff1 = 36893488147419103232 - 1

and_test_cases = [
    # Small positive integers
    (3 & 1, 1, "3 & 1"),
    # Small negative integers
    (-3 & 1, 1, "-3 & 1"),
    (-5 & -2, -6, "-5 & -2"),
    # Large positive integers (beyond int64 range)
    ((73786976294838206464) & (36893488147419103232), 0, "(73786976294838206464) & (36893488147419103232)"),
    #((36893488147419103232 - 1) & (36893488147419103232 - 1), 36893488147419103232 - 1, "(36893488147419103232 - 1) & (36893488147419103232 - 1)"),
    (diff1 & diff1, diff1, "diff1"),
    ((36893488147419103232 - 1) & (36893488147419103232 - 1), 36893488147419103232 - 1, "(36893488147419103232 - 1) & (36893488147419103232 - 1)"),
    (36893488147419103231 & 36893488147419103231, 36893488147419103231, "(36893488147419103231) & (36893488147419103231)"),

    # Large negative integers (beyond int64 range)
    (-36893488147419103232 & -36893488147419103232, -36893488147419103232, "-36893488147419103232 & -36893488147419103232"),
    (-73786976294838206464 & (36893488147419103232 - 1), 0, "-73786976294838206464 & (36893488147419103232 - 1)"),

    # Mixed small positive and negative
    (3 & -1, 3, "3 & -1"),
    (-3 & 2, 0, "-3 & 2"),

    # Mixed large positive and negative
    ((36893488147419103232 - 1) & -1, 36893488147419103232 - 1, "(36893488147419103232 - 1) & -1"),
    (-73786976294838206464 & (36893488147419103232 - 1), 0, "-73786976294838206464 & (36893488147419103232 - 1)"),
]

and_tests = TestSuite("and tests",
  and_test_cases.map_List(((got, ex, m)) -> assert_eq(got, ex, m)))

or_test_cases = [
    # Small positive integers
    (3 | 1, 3, "3 | 1"),
    # Small negative integers
    (-3 | 1, -3, "-3 | 1"),
    (-5 | -2, -1, "-5 | -2"),
    # Large positive integers (beyond int64 range)
    ((73786976294838206464) | (36893488147419103232), 110680464442257309696, "(73786976294838206464) | (36893488147419103232)"),
    (diff1 | diff1, diff1, "diff1"),
    ((36893488147419103232 - 1) | (36893488147419103232 - 1), 36893488147419103232 - 1, "(36893488147419103232 - 1) | (36893488147419103232 - 1)"),
    (36893488147419103231 | 36893488147419103231, 36893488147419103231, "(36893488147419103231) | (36893488147419103231)"),

    # Large negative integers (beyond int64 range)
    (-36893488147419103232 | -36893488147419103232, -36893488147419103232, "-36893488147419103232 | -36893488147419103232"),
    (-73786976294838206464 | (36893488147419103232 - 1), -36893488147419103233, "-73786976294838206464 | (36893488147419103232 - 1)"),

    # Mixed small positive and negative
    (3 | -1, -1, "3 | -1"),
    (-3 | 2, -1, "-3 | 2"),

    # Mixed large positive and negative
    ((36893488147419103232 - 1) | -1, -1, "(36893488147419103232 - 1) | -1"),
    (-73786976294838206464 | (36893488147419103232 - 1), -36893488147419103233, "-73786976294838206464 | (36893488147419103232 - 1)"),
]

or_tests = TestSuite("or tests",
  or_test_cases.map_List(((got, ex, m)) -> assert_eq(got, ex, m)))

xor_test_cases = [
    # Small positive integers
    (3 ^ 1, 2, "3 ^ 1"),
    # Small negative integers
    (-3 ^ 1, -4, "-3 ^ 1"),
    (-5 ^ -2, 5, "-5 ^ -2"),
    # Large positive integers (beyond int64 range)
    ((73786976294838206464) ^ (36893488147419103232), 110680464442257309696, "(73786976294838206464) ^ (36893488147419103232)"),
    (diff1 ^ diff1, 0, "diff1"),
    ((36893488147419103232 - 1) ^ (36893488147419103232 - 1), 0, "(36893488147419103232 - 1) ^ (36893488147419103232 - 1)"),
    (36893488147419103231 ^ 36893488147419103231, 0, "(36893488147419103231) ^ (36893488147419103231)"),

    # Large negative integers (beyond int64 range)
    (-36893488147419103232 ^ -36893488147419103232, 0, "-36893488147419103232 ^ -36893488147419103232"),
    (-73786976294838206464 ^ (36893488147419103232 - 1), -36893488147419103233, "-73786976294838206464 ^ (36893488147419103232 - 1)"),

    # Mixed small positive and negative
    (3 ^ -1, -4, "3 ^ -1"),
    (-3 ^ 2, -1, "-3 ^ 2"),

    # Mixed large positive and negative
    ((36893488147419103232 - 1) ^ -1, -36893488147419103232, "(36893488147419103232 - 1) ^ -1"),
    (-73786976294838206464 ^ (36893488147419103232 - 1), -36893488147419103233, "-73786976294838206464 ^ (36893488147419103232 - 1)"),
]

xor_tests = TestSuite("xor tests",
  xor_test_cases.map_List(((got, ex, m)) -> assert_eq(got, ex, m)))


add_sub = TestSuite("addition and subtraction", [
    Assertion(42 + 58 == 100, "42 + 58 == 100"),
    Assertion(-42 * 2 == -84, "-42 * 2 == -84"),
    Assertion(0 - 1 == -1, "0 - 1 == -1"),
    # 32-bit max + 1
    Assertion(2_147_483_647 + 1 == 2_147_483_648, "2_147_483_647 + 1 == 2_147_483_648 but got ${int_to_String(2_147_483_647 + 1)}"),
    # 32-bit max - 1
    Assertion(2_147_483_647 - 1 == 2_147_483_646, "2_147_483_647 - 1 == 2_147_483_646"),
    # 32-bit min - 1
    Assertion(-2_147_483_648 - 1 == -2_147_483_649, "-2_147_483_648 - 1 == -2_147_483_649 but got ${int_to_String(-2_147_483_648 - 1)}"),
    Assertion(-2_147_483_647 - 1 == -2_147_483_648, "-2_147_483_647 - 1 == -2_147_483_648 but got ${int_to_String(-2_147_483_647 - 1)}"),
    Assertion(-2_147_483_647 - 2 == -2_147_483_649, "-2_147_483_647 - 2 == -2_147_483_649 but got ${int_to_String(-2_147_483_647 - 2)}"),
    Assertion(0 - (-2_147_483_648) == 2_147_483_648, "-(-2_147_483_648) works: ${int_to_String(0 - (-2_147_483_648))}"),
    Assertion(0 - (-2_147_483_647) == 2_147_483_647, "-(-2_147_483_647) works: ${int_to_String(0 - (-2_147_483_647))}"),
    # 32-bit overflow test
    Assertion(2_147_483_647 * 2 == 4_294_967_294, "2_147_483_647 * 2 == 4_294_967_294 but got: ${int_to_String(2_147_483_647 * 2)}"),
    # 32-bit -> overflow, then back down
    Assertion(((2_147_483_647 * 10) - (2_147_483_647 * 9)) == 2_147_483_647, "(x := 2_147_483_647) * 10 -  x * 9 == x result = ${int_to_String(((2_147_483_647 * 10) - (2_147_483_647 * 9)))}"),
    # 64-bit max + 1
    Assertion(9_223_372_036_854_775_807 + 1 == 9_223_372_036_854_775_808, "9_223_372_036_854_775_807 + 1 == 9_223_372_036_854_775_808"),
    # 64-bit min - 1
    Assertion(-9_223_372_036_854_775_808 - 1 == -9_223_372_036_854_775_809, "-9_223_372_036_854_775_808 - 1 == -9_223_372_036_854_775_809"),
    # 64-bit overflow test
    Assertion(9_223_372_036_854_775_807 * 2 == 18_446_744_073_709_551_614, "9_223_372_036_854_775_807 * 2 == 18_446_744_073_709_551_614"),
    # 64-bit negative overflow test
    Assertion(-9_223_372_036_854_775_808 * 2 == -18_446_744_073_709_551_616, "-9_223_372_036_854_775_808 * 2 == -18_446_744_073_709_551_616"),
    # Post-overflow arithmetic
    Assertion((9_223_372_036_854_775_807 + 1) * 2 == 18_446_744_073_709_551_616, "(9_223_372_036_854_775_807 + 1) * 2 == 18_446_744_073_709_551_616"),
    # Mixed multiplication and subtraction
    Assertion((9_223_372_036_854_775_807 * 9) - (9_223_372_036_854_775_807 * 8) == 9_223_372_036_854_775_807, "(9_223_372_036_854_775_807 * 9) - (9_223_372_036_854_775_807 * 8) == 9_223_372_036_854_775_807"),
    Assertion(diff1 matches 36893488147419103231, "diff1 value check")
])

string_tests = TestSuite("string tests", [
    Assertion(int_to_String(diff1) matches "36893488147419103231", int_to_String(diff1)),
    Assertion(int_to_String(diff1 & diff1) matches "36893488147419103231", int_to_String(diff1)),
  ]
)

tests = TestSuite("integer tests", [
  add_sub,
  string_tests,
  and_tests,
  or_tests,
  xor_tests,
])