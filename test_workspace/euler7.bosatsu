package Euler/P7

import Bosatsu/Bool [ not ]
import Bosatsu/List [ for_all ]

# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10 001st prime number?

operator + = add
operator - = sub
operator == = eq_Int

def int_loop_up(top, res, fn):
  int_loop(top, res, \i, res ->
    rev_i = top - i
    (next_rev, next_res) = fn(rev_i, res)
    (top - next_rev, next_res))

def divides(denom, num):
  num.mod_Int(denom).eq_Int(0)

def is_prime(x):
  int_loop_up(x, False, \i, div ->
    nexti = i + 1
    candidate = i + 2
    match cmp_Int(candidate, x):
      LT: (x, True) if div else (nexti, candidate.divides(x))
      _: (x, False)).not

def none_divide(primes, x):
  for_all(primes, \p -> not(p.divides(x)))

# the gap between primes might be as small as (log N)^2, so
# even if the gap is O(N), clearly false, we would only have
# to sum up to k^2 values to find the k^th prime.
# we need to know a finite upper bound since we can't loop forever.
def ith_prime(total):
  max_size = range(total.times(total))
  # we could do int_loop or int_loop up, this was a bit simpler
  (ps, _) = max_size.foldLeft(([], 0), \prime_cnt, i ->
    #2 is the first prime
    candidate = i.add(2)
    (primes, cnt) = prime_cnt
    match cmp_Int(cnt, total):
      LT:
        if none_divide(primes, candidate): ([candidate, *primes], cnt.add(1))
        else: prime_cnt
      _: prime_cnt)

  match ps:
    [h, *_]: h
    []: -1

test =
    TestSuite("euler 7", [
        Assertion(is_prime(13), "6th prime is 13"),
        Assertion(ith_prime(6) == 13, "6th prime is 13"),
        Assertion(ith_prime(11) == 31, "11th prime is 31"),
    ])
