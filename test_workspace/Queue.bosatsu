package Queue

from Bosatsu/List import eq_List
from Bosatsu/Rand import (Rand, sequence_Rand, map_Rand, flat_map_Rand,
  int_range as int_range_Rand, geometric_Int, one_of, prod_Rand)

from Bosatsu/Nat import (Nat, Zero, Succ, to_Nat as int_to_Nat)

from Bosatsu/Properties import Prop, forall_Prop, suite_Prop, run_Prop

export (Queue,
  empty_Queue, fold_Queue, push, unpush, pop_value, pop, reverse_Queue, eq_Queue,
  to_List, from_List
)

struct Queue(front: List[a], back: List[a])

empty_Queue: forall a. Queue[a] = Queue([], [])

# convenient local alias
empty = empty_Queue

def from_List(list: List[a]) -> Queue[a]:
  Queue(list, [])

def push(Queue(f, b): Queue[a], item: a) -> Queue[a]:
  Queue(f, [item, *b])

def unpush(queue: Queue[a]) -> Option[(a, Queue[a])]:
  match queue:
    Queue([h, *t], b): Some((h, Queue(t, b)))
    Queue([], b):
      match b.reverse():
        []: None
        [h, *t]: Some((h, Queue(t, [])))

def pop_value(queue: Queue[a]) -> Option[a]:
  match unpush(queue):
    Some((a, _)): Some(a)
    None: None

# drop an item off and return the rest, or empty
def pop(queue: Queue[a]) -> Queue[a]:
  match unpush(queue):
    Some((_, queue)): queue
    None: empty

def fold_Queue(Queue(f, b): Queue[a], init: b, fold_fn: (b, a) -> b) -> b:
  front = f.foldLeft(init, fold_fn)
  b.reverse().foldLeft(front, fold_fn)

def reverse_Queue(Queue(f, b): Queue[a]) -> Queue[a]:
  Queue(b, f)

def eq_Queue(eq_fn: (a, a) -> Bool)(left: Queue[a], right: Queue[a]) -> Bool:
  res = left.fold_Queue((True, right), \(g, right), al ->
    if g:
        match unpush(right):
          None: (False, empty)
          Some((ar, right)):
            (eq_fn(al, ar), right)
    else:
          (False, empty)
    )
  match res:
    (True, Queue([], [])): True
    _: False

def to_List(Queue(f, b): Queue[a]) -> List[a]:
  f.concat(b.reverse())

########
## TestSuites below
########

def eq_Opt(eq_inner)(a, b):
    match (a, b):
        (Some(a), Some(b)): eq_inner(a, b)
        (None, None): True
        _: False

eq_oi = eq_Opt(eq_Int)
eq_qi = eq_Queue(eq_Int)
eq_li = eq_List(eq_Int)

q12 = empty.push(1).push(2)

def samp(r)(fn): flat_map_Rand(r, fn)

rand_int = int_range_Rand(128)

rand_geo_List_Int: Rand[List[Int]] = (
  len <- geometric_Int.samp()
  lst = replicate_List(rand_int, len)
  sequence_Rand(lst)
)

queue_from_list = rand_geo_List_Int.map_Rand(from_List)

def rand_Queue_depth(depth: Nat) -> Rand[Queue[Int]]:
    recur depth:
        case Zero: queue_from_list
        case Succ(n):
          smaller = rand_Queue_depth(n)
          pop_rand = smaller.map_Rand(pop)
          push_rand = prod_Rand(rand_int, smaller).map_Rand(((h, q)) -> push(q, h))
          rev_rand = smaller.map_Rand(reverse_Queue)
          one_of(pop_rand, [push_rand, rev_rand])

rand_Queue_Int: Rand[Queue[Int]] = rand_Queue_depth(int_to_Nat(50))

def show_List[a](lst: List[a], showa: a -> String) -> String:
  def inner(lst):
    recur lst:
      case []: ""
      case [a]: showa(a)
      case [a, *t]:
        tstr = inner(t)
        astr = showa(a)
        "${astr}, ${tstr}"

  middle = inner(lst)
  "[${middle}]"

def show_Queue[a](q: Queue[a], showa: a -> String) -> String:
  Queue(f, b) = q
  frontStr = show_List(f, showa)
  backStr = show_List(b, showa)
  "Queue(${frontStr}, ${backStr})"

queue_laws = suite_Prop(
  "queue properties",
  [
    forall_Prop(rand_Queue_Int, "pop-law/toList", q -> (
      res = match q.pop_value():
          case None: to_List(q) matches []
          case Some(i):
            match to_List(q):
                case [h, *_]: eq_Int(h, i)
                case _: False
      Assertion(res, "check head")
    )),
    forall_Prop(rand_Queue_Int, "reverse isomorphism", q -> (
      rev_tl = q.reverse_Queue().to_List()
      rev_tl_str = show_List(rev_tl, int_to_String)
      tl_rev = q.to_List().reverse()
      tl_rev_str = show_List(tl_rev, int_to_String)
      res = eq_li(rev_tl, tl_rev)
      q_str = show_Queue(q, int_to_String)
      Assertion(res, "rev_tl = ${rev_tl_str} tl_rev = ${tl_rev_str}: ${q_str}")
    )),
    forall_Prop(rand_int.prod_Rand(rand_Queue_Int),
      "push is the same as reverse prepend reverse", ((h, q)) -> (
      q1 = q.push(h).to_List()
      q2 = [h, *q.to_List().reverse()].reverse()
      res = eq_li(q1, q2)
      Assertion(res, "push isomorphism")
    )),
    forall_Prop(rand_Queue_Int, "pop isomorphism", q -> (
      match q.unpush():
        case Some((h, t)):
          list1 = [h, *(t.to_List())]
          list2 = q.to_List()
          Assertion(eq_li(list1, list2), "pop non-empty")
        case None:
          Assertion(q.to_List() matches [], "empty is only unpush")
    )),
  ]
)

tests = TestSuite("queue tests", [
  Assertion(eq_oi(q12.pop_value(), Some(1)), "1"),
  Assertion(q12.fold_Queue(0,add).eq_Int(3), "fold_Queue add"),
  Assertion(q12.fold_Queue(0,\_, x -> x).eq_Int(2), "take the second"),
  Assertion(q12.fold_Queue(0,\x, _ -> x).eq_Int(0), "take the first"),
  Assertion(q12.reverse_Queue().reverse_Queue().eq_qi(q12), "reverse is idempotent"),
  Assertion(q12.eq_qi(from_List([1, 2])), "from list [1, 2]"),
  Assertion(q12.push(3).eq_qi(from_List([1, 2, 3])), "from list [1, 2, 3]"),
  Assertion(empty_Queue.eq_qi(from_List([])), "empty_Queue == from_List([])"),
  Assertion(q12.eq_qi(from_List([1, 2])), "from list [1, 2]"),
  Assertion(from_List([1, 2, 3]).pop().pop().pop().eq_qi(empty), "pop to empty"),
  Assertion(empty.pop().eq_qi(empty), "pop empty is okay"),
  Assertion(to_List(from_List([1, 1, 2, 2, 3, 3])).eq_li([1, 1, 2, 2, 3, 3]), "to/from List"),
  run_Prop(queue_laws, 100, 4242),
])
