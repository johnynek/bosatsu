package Bosatsu/Example/ApplicativeTraverse

import Bosatsu/List [ eq_List ]
import Bosatsu/Option [ eq_Option ]
export [Applicative(), Traverse(), traverse_List, applicative_Option]

# Represents the Applicative typeclass
struct Applicative(
  pure: forall a. a -> f[a],
  map: forall a, b. (a -> b) -> f[a] -> f[b],
  ap: forall a, b. f[a -> b] -> f[a] -> f[b],
  map2: forall a, b, c. f[a] -> f[b] -> (a -> b -> c) -> f[c],
  product: forall a, b. f[a] -> f[b] -> f[(a, b)])

# Build an applicative from pure, map, and product
def applicative_from_pure_map_product(
  pure: forall a. a -> f[a],
  map: forall a, b. (a -> b) -> f[a] -> f[b],
  product: forall a, b. f[a] -> f[b] -> f[(a, b)]) -> Applicative[f]:

  def ap(fn, fa):
    map(\(fn, a) -> fn(a), product(fn, fa))

  def map2(fa, fb, fn):
    map(\(a, b) -> fn(a, b), product(fa, fb))

  Applicative {
    pure,
    map,
    product,
    ap,
    map2
  }

# Build an applicative from pure, ap
def applicative_from_pure_ap(
  pure: forall a. a -> f[a],
  ap: forall a, b. f[a -> b] -> f[a] -> f[b]) -> Applicative[f]:

  def map(fn, fa): ap(pure(fn), fa)

  def product(fa, fb):
    make_tup = map(\a -> \b -> (a, b), fa)
    ap(make_tup, fb)

  def map2(fa, fb, fn):
    make_c = map(fn, fa)
    ap(make_c, fb)

  Applicative {
    pure,
    ap,
    map,
    product,
    map2
  }

# Represents the Traverse typeclass
struct Traverse(
  traverse: forall a, b, f. Applicative[f] -> (a -> f[b]) -> g[a] -> f[g[b]])

applicative_Option: Applicative[Option] = applicative_from_pure_map_product(
    \a -> Some(a),
    \fn, opt -> match opt:
      Some(a): Some(fn(a))
      None: None,
    \as, bs ->
      match (as, bs):
        (Some(a), Some(b)): Some((a, b))
        _: None
  )

def trav_l(app: Applicative[f], fn: a -> f[b], lst: List[a]) -> f[List[b]]:
  Applicative { pure, map, product, ... } = app

  def loop(lst: List[a], ftail: f[List[b]]) -> f[List[b]]:
    recur lst:
      []: ftail
      [h, *t]: loop(t, map(\(h, t) -> [h, *t], product(fn(h), ftail)))

  map(reverse, loop(lst, pure([])))

# here is the traverse instance for List
(traverse_List: Traverse[List]) = Traverse(trav_l)

#########
# Below here we have the tests
#########

trav_list_opt = trav_l(applicative_Option)

# Here is equality on Option[List[Int]]
eq_opt_list_int = eq_Option(eq_List(eq_Int))

operator == = eq_opt_list_int

test = TestSuite("applicative/traverse tests",
  [
    Assertion(trav_list_opt(\x -> Some(2.times(x)), [1, 2, 3]) == Some([2, 4, 6]), "double"),
    Assertion(trav_list_opt(\_ -> None, [1, 2, 3]) == None, "all to None"),
    Assertion(trav_list_opt(\x -> None if x.eq_Int(3) else Some(x), [1, 2, 3]) == None, "3 to None"),
    Assertion(trav_list_opt(\x -> None if x.eq_Int(3) else Some(x), []) == Some([]), "empty to Some"),
  ])
