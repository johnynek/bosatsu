package PredefTests

operator / = div
operator % = mod_Int

test_int = TestSuite("Int tests", [
      Assertion((4 % -3) matches -2, "(4 % -3) == -2"),
      Assertion((-8 % -2) matches 0, "(-8 % -2) == 0"),
      Assertion((-8 / -2) matches 4, "(-8 / -2) == 4"),
      Assertion((-4 % -3) matches -1, "(-4 % -3) == -1"),
      Assertion((13 % 3) matches 1, "13 % 3 == 1"),
      Assertion((-113 / 16) matches -8, "-113/16 == -8"),
      Assertion((54 % -3) matches 0, "54 % -3 == 0"),
      Assertion((54 / -3) matches -18, "54 / -3 == -18"),
      Assertion((54 % 0) matches 54, "54 % 0 == 54"),
      Assertion((54 / 0) matches 0, "54 / 0 == 0"),
      Assertion((-54 % 0) matches -54, "-54 % 0 == -54"),
      Assertion((-54 / 0) matches 0, "-54 / 0 == 0"),

      Assertion(gcd_Int(4, 3) matches 1, "gcd(4, 3) == 1"),
      Assertion(gcd_Int(-4, -3) matches -1, "gcd(-4, -3) == -1"),
      Assertion(gcd_Int(4, 2) matches 2, "gcd(4, 2) == 2"),

      Assertion(int_to_String(0) matches "0", "0 str"),
      Assertion(int_to_String(123) matches "123", "123 str"),
      Assertion(int_to_String(-123) matches "-123", "-123 str"),
    ])

test_string = TestSuite("String tests", [
  Assertion("foo".partition_String("f") matches Some(("", "oo")), "foo partition_String f"),
  Assertion("foo".partition_String("") matches None, "foo partition_String \"\""),
  Assertion("foo".partition_String("x") matches None, "foo partition_String x"),
  Assertion("foo".rpartition_String("o") matches Some(("fo", "")), "foo rpartition_String o"),
  Assertion("foo".rpartition_String("") matches None, "foo rpartition_String \"\""),
  Assertion("foo".rpartition_String("x") matches None, "foo rpartition_String x"),
])

test = TestSuite("Predef tests", [
    test_int,
    test_string,
])
