jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2.1.0"
      - uses: "coursier/cache-action@v6"
      - name: "java ${{matrix.java}} setup"
        uses: "olafurpg/setup-scala@v14"
        with:
          java-version: "${{matrix.java}}"
      - name: "run JVM tests"
        run: |
          sbt "coreJVM/test; cli/test; doc; paradox"
          ./test_cli.sh
    strategy:
      matrix:
        java:
          - '8'
          - '11'
    timeout-minutes: 30
  testPY:
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2.1.0"
      - uses: "coursier/cache-action@v6"
      - name: "java ${{matrix.java}} setup"
        uses: "olafurpg/setup-scala@v14"
        with:
          java-version: "${{matrix.java}}"
      - name: "python setup"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{matrix.python}}"
      - name: "build assembly"
        run: 'sbt "cli/assembly"'
      - name: "generate python code"
        run: "./bosatsuj transpile --input_dir test_workspace/ --package_root test_workspace/ python --outdir pyout --externals test_workspace/Prog.bosatsu_externals --evaluators test_workspace/Prog.bosatsu_eval"
      - name: "run python tests"
        run: "PYTHONPATH=$PYTHONPATH:$(pwd)/test_workspace:$(pwd)/pyout python3 -m unittest discover pyout -v --pattern \"*.py\""
    strategy:
      matrix:
        java:
          - '11'
        python:
          - '3.9'
    timeout-minutes: 30
  testJS:
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2.1.0"
      - uses: "coursier/cache-action@v6"
      - name: "java ${{matrix.java}} setup"
        uses: "olafurpg/setup-scala@v14"
        with:
          java-version: "${{matrix.java}}"
      - name: "run coreJS tests"
        run: |
          sbt "coreJS/test; jsapiJS/compile"
          sbt "jsuiJS/test"
    strategy:
      matrix:
        java:
          - '11'
    timeout-minutes: 30
  testWithCoverageReport:
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2.1.0"
      - uses: "coursier/cache-action@v6"
      - name: "java ${{matrix.java}} setup"
        uses: "olafurpg/setup-scala@v14"
        with:
          java-version: "${{matrix.java}}"
      - name: "run tests with coverage"
        run: |
          sbt "coverage; clean; coreJVM/test; cli/test; coverageReport"
          bash <(curl -s https://codecov.io/bash)
    strategy:
      matrix:
        java:
          - '8'
    timeout-minutes: 30
  buildWithGraal:
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2.1.0"
      - uses: "coursier/cache-action@v6"
      - name: "graalvm setup"
        uses: "olafurpg/setup-scala@v14"
        with:
          java-version: "${{matrix.java}}"
      - name: "build native image"
        run: |
          sbt "cli/nativeImage"
          cp cli/target/native-image/bosatsu-cli bosatsu
      - name: "run bosatsu tests"
        run: |
          ./bosatsu test --input_dir test_workspace/ --package_root test_workspace/
    strategy:
      matrix:
        java:
          - '8'
  testWithNode:
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2.1.0"
      - uses: "coursier/cache-action@v6"
      - name: "graalvm setup"
        uses: "olafurpg/setup-scala@v14"
        with:
          java-version: "${{matrix.java}}"
      - name: "build node"
        run: |
          sbt "cliJSJS/fullOptJS"
      - name: "run bosatsu tests"
        run: |
          ./bosatsu_node test --input_dir test_workspace/ --package_root test_workspace/
    strategy:
      matrix:
        java:
          - '8'
  testC:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java:
          - '8'
    steps:
      - uses: "actions/checkout@v2.1.0"
      - name: "java setup"
        uses: "olafurpg/setup-scala@v14"
        with:
          java-version: "${{matrix.java}}"
      - name: "build assembly"
        run: 'sbt "cli/assembly"'
      - name: "install boehm"
        run: "sudo apt-get update && sudo apt install -y libgc1 libgc-dev"
      - name: "test runtime code"
        run: |
          cd c_runtime
          rm -f test_exe
          make && git diff --quiet || { git diff; false; }
          make boehm_example
          make install
          ./test_exe && ./boehm_example && cd ..
      - name: "generate and compile c code"
        run: "./bosatsuj transpile --input_dir test_workspace/ --package_root test_workspace/ c --outdir c_out --test --exe_out test_exe"
      - name: "run generated c code"
        run: ./c_out/test_exe
      - name: "run lib test"
        run: |
          mkdir c_out_lib
          ./bosatsuj lib test --outdir c_out_lib
    timeout-minutes: 30
name: ci
on:
  pull_request: {}
